//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace MyNamespace
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "https://api.zotero.org/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetItemTypesAsync()
        {
            return GETgetItemTypesAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetItemTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/itemTypes");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ItemFieldsAsync()
        {
            return ItemFieldsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ItemFieldsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/itemFields");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="itemType">Get all the item types by making &lt;a href="#!/zotero/getItemTypes" target="_blank"&gt;an item type request&lt;/a&gt;</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ItemTypeFieldsAsync(string itemType)
        {
            return ItemTypeFieldsAsync(itemType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="itemType">Get all the item types by making &lt;a href="#!/zotero/getItemTypes" target="_blank"&gt;an item type request&lt;/a&gt;</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ItemTypeFieldsAsync(string itemType, System.Threading.CancellationToken cancellationToken)
        {
            if (itemType == null)
                throw new System.ArgumentNullException("itemType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/itemTypeFields?");
            urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="itemType">Get all the item types by making &lt;a href="#!/zotero/getItemTypes" target="_blank"&gt;an item type request&lt;/a&gt;</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ItemTypeCreatorTypesAsync(string itemType)
        {
            return ItemTypeCreatorTypesAsync(itemType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="itemType">Get all the item types by making &lt;a href="#!/zotero/getItemTypes" target="_blank"&gt;an item type request&lt;/a&gt;</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ItemTypeCreatorTypesAsync(string itemType, System.Threading.CancellationToken cancellationToken)
        {
            if (itemType == null)
                throw new System.ArgumentNullException("itemType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/itemTypeCreatorTypes?");
            urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CreatorFieldsAsync()
        {
            return CreatorFieldsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CreatorFieldsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/creatorFields");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="itemType">Get all the item types by making &lt;a href="#!/zotero/getItemTypes" target="_blank"&gt;an item type request&lt;/a&gt;</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetItemTemplateAsync(string itemType)
        {
            return GETgetItemTemplateAsync(itemType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="itemType">Get all the item types by making &lt;a href="#!/zotero/getItemTypes" target="_blank"&gt;an item type request&lt;/a&gt;</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetItemTemplateAsync(string itemType, System.Threading.CancellationToken cancellationToken)
        {
            if (itemType == null)
                throw new System.ArgumentNullException("itemType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/items/new?");
            urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="userId">User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses.</param>
        /// <param name="format">Answer format.</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetGroupsFromUserIdAsync(string userId, Format format, string key, string q, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetGroupsFromUserIdAsync(userId, format, key, q, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="userId">User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses.</param>
        /// <param name="format">Answer format.</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetGroupsFromUserIdAsync(string userId, Format format, string key, string q, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/users/{userId}/groups?");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (key != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetPrivilegesOfKeyAsync(string key)
        {
            return GETgetPrivilegesOfKeyAsync(key, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetPrivilegesOfKeyAsync(string key, System.Threading.CancellationToken cancellationToken)
        {
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/keys/{key}");
            urlBuilder_.Replace("{key}", System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetItemsAsync(Users_or_groups users_or_groups, string elementId, string key, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetItemsAsync(users_or_groups, elementId, key, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetItemsAsync(Users_or_groups users_or_groups, string elementId, string key, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/items?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="body">Get the new item description by calling &lt;a href="#!/zotero/getItemTemplate" target="_blank"&gt;an item template request&lt;/a&gt;. Then modify it and resubmit it to the server in an array.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task POSTcreateItemAsync(Users_or_groups users_or_groups, string elementId, string key, Format3 format, System.Collections.Generic.IEnumerable<object> body)
        {
            return POSTcreateItemAsync(users_or_groups, elementId, key, format, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="body">Get the new item description by calling &lt;a href="#!/zotero/getItemTemplate" target="_blank"&gt;an item template request&lt;/a&gt;. Then modify it and resubmit it to the server in an array.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task POSTcreateItemAsync(Users_or_groups users_or_groups, string elementId, string key, Format3 format, System.Collections.Generic.IEnumerable<object> body, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/items?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Conflict: The target library is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Precondition Failed: The provided Zotero-Write-Token has already been submitted.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Request Entity Too Large: Too many items submitted", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetTopItemsAsync(Users_or_groups users_or_groups, string elementId, string key, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetTopItemsAsync(users_or_groups, elementId, key, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetTopItemsAsync(Users_or_groups users_or_groups, string elementId, string key, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/items/top?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetTrashItemsAsync(Users_or_groups users_or_groups, string elementId, string key, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetTrashItemsAsync(users_or_groups, elementId, key, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetTrashItemsAsync(Users_or_groups users_or_groups, string elementId, string key, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/items/trash?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="itemKey">A specific Item in the library.</param>
        /// <param name="format">Answer format.</param>
        /// <param name="include">Formats to include in the response (for format=json).</param>
        /// <param name="content">Formats to include in the response (for format=atom).</param>
        /// <param name="style">Citation style to use for formatted references. Can be either the file name (without the .csl extension) of one of the styles in the Zotero Style Repository (e.g., apa) or the URL of a remote CSL file.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetSpecificItemAsync(Users_or_groups users_or_groups, string elementId, string key, string itemKey, Format4 format, string include, string content, string style)
        {
            return GETgetSpecificItemAsync(users_or_groups, elementId, key, itemKey, format, include, content, style, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="itemKey">A specific Item in the library.</param>
        /// <param name="format">Answer format.</param>
        /// <param name="include">Formats to include in the response (for format=json).</param>
        /// <param name="content">Formats to include in the response (for format=atom).</param>
        /// <param name="style">Citation style to use for formatted references. Can be either the file name (without the .csl extension) of one of the styles in the Zotero Style Repository (e.g., apa) or the URL of a remote CSL file.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetSpecificItemAsync(Users_or_groups users_or_groups, string elementId, string key, string itemKey, Format4 format, string include, string content, string style, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (itemKey == null)
                throw new System.ArgumentNullException("itemKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/items/{itemKey}?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{itemKey}", System.Uri.EscapeDataString(ConvertToString(itemKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (include != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (content != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("content") + "=").Append(System.Uri.EscapeDataString(ConvertToString(content, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (style != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("style") + "=").Append(System.Uri.EscapeDataString(ConvertToString(style, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="itemKey">A specific Item in the library.</param>
        /// <param name="if_Unmodified_Since_Version">Item's current version number</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DELETEdeleteItemAsync(Users_or_groups users_or_groups, string elementId, string key, string itemKey, long if_Unmodified_Since_Version)
        {
            return DELETEdeleteItemAsync(users_or_groups, elementId, key, itemKey, if_Unmodified_Since_Version, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="itemKey">A specific Item in the library.</param>
        /// <param name="if_Unmodified_Since_Version">Item's current version number</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DELETEdeleteItemAsync(Users_or_groups users_or_groups, string elementId, string key, string itemKey, long if_Unmodified_Since_Version, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (itemKey == null)
                throw new System.ArgumentNullException("itemKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/items/{itemKey}?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{itemKey}", System.Uri.EscapeDataString(ConvertToString(itemKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_Unmodified_Since_Version == null)
                        throw new System.ArgumentNullException("if_Unmodified_Since_Version");
                    request_.Headers.TryAddWithoutValidation("If-Unmodified-Since-Version", ConvertToString(if_Unmodified_Since_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Conflict: The target library is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Precondition Failed: The item has changed since retrieval (i.e., the provided item version no longer matches).", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="itemKey">A specific Item in the library.</param>
        /// <param name="if_Unmodified_Since_Version">Item's current version number</param>
        /// <param name="body">First, &lt;a href="#!/zotero/getSpecificItem" target="_blank"&gt;retrieve the current version of the item&lt;/a&gt;&lt;br/&gt;The editable data will be found in the data property in the response.&lt;br/&gt;Copy all the data object, edit the values and send it to the server.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PATCHupdateItemAsync(Users_or_groups users_or_groups, string elementId, string key, string itemKey, long if_Unmodified_Since_Version, object body)
        {
            return PATCHupdateItemAsync(users_or_groups, elementId, key, itemKey, if_Unmodified_Since_Version, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="itemKey">A specific Item in the library.</param>
        /// <param name="if_Unmodified_Since_Version">Item's current version number</param>
        /// <param name="body">First, &lt;a href="#!/zotero/getSpecificItem" target="_blank"&gt;retrieve the current version of the item&lt;/a&gt;&lt;br/&gt;The editable data will be found in the data property in the response.&lt;br/&gt;Copy all the data object, edit the values and send it to the server.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PATCHupdateItemAsync(Users_or_groups users_or_groups, string elementId, string key, string itemKey, long if_Unmodified_Since_Version, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (itemKey == null)
                throw new System.ArgumentNullException("itemKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/items/{itemKey}?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{itemKey}", System.Uri.EscapeDataString(ConvertToString(itemKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_Unmodified_Since_Version == null)
                        throw new System.ArgumentNullException("if_Unmodified_Since_Version");
                    request_.Headers.TryAddWithoutValidation("If-Unmodified-Since-Version", ConvertToString(if_Unmodified_Since_Version, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request: Invalid type/field; unparseable JSON", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Conflict: The target library is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Precondition Failed: The item has changed since retrieval (i.e., the provided item version no longer matches).", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="itemKey">A specific Item in the library.</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetChildItemsOfSpecificItemAsync(Users_or_groups users_or_groups, string elementId, string key, string itemKey, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetChildItemsOfSpecificItemAsync(users_or_groups, elementId, key, itemKey, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="itemKey">A specific Item in the library.</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetChildItemsOfSpecificItemAsync(Users_or_groups users_or_groups, string elementId, string key, string itemKey, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (itemKey == null)
                throw new System.ArgumentNullException("itemKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/items/{itemKey}/children?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{itemKey}", System.Uri.EscapeDataString(ConvertToString(itemKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="itemKey">A specific Item in the library.</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetTagsOfSpecificItemAsync(Users_or_groups users_or_groups, string elementId, string key, string itemKey, Format5 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetTagsOfSpecificItemAsync(users_or_groups, elementId, key, itemKey, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="itemKey">A specific Item in the library.</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetTagsOfSpecificItemAsync(Users_or_groups users_or_groups, string elementId, string key, string itemKey, Format5 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (itemKey == null)
                throw new System.ArgumentNullException("itemKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/items/{itemKey}/tags?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{itemKey}", System.Uri.EscapeDataString(ConvertToString(itemKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetTagsAsync(Users_or_groups users_or_groups, string elementId, string key, Format5 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetTagsAsync(users_or_groups, elementId, key, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetTagsAsync(Users_or_groups users_or_groups, string elementId, string key, Format5 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/tags?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="tagName">Url encoded tag name</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetSPecificTagAsync(Users_or_groups users_or_groups, string elementId, string key, string tagName, Format6 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetSPecificTagAsync(users_or_groups, elementId, key, tagName, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="tagName">Url encoded tag name</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetSPecificTagAsync(Users_or_groups users_or_groups, string elementId, string key, string tagName, Format6 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (tagName == null)
                throw new System.ArgumentNullException("tagName");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/tags/{tagName}?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{tagName}", System.Uri.EscapeDataString(ConvertToString(tagName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetCollectionsAsync(Users_or_groups users_or_groups, string elementId, string key, Format7 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetCollectionsAsync(users_or_groups, elementId, key, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetCollectionsAsync(Users_or_groups users_or_groups, string elementId, string key, Format7 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/collections?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="body">The Collection information</param>
        /// <returns>ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task POSTcreateCollectionAsync(Users_or_groups users_or_groups, string elementId, string key, System.Collections.Generic.IEnumerable<Anonymous> body)
        {
            return POSTcreateCollectionAsync(users_or_groups, elementId, key, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="body">The Collection information</param>
        /// <returns>ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task POSTcreateCollectionAsync(Users_or_groups users_or_groups, string elementId, string key, System.Collections.Generic.IEnumerable<Anonymous> body, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/collections?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Conflict: The target library is locked", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Precondition Failed: The provided Zotero-Write-Token has already been submitted.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetTopCollectionsAsync(Users_or_groups users_or_groups, string elementId, string key, Format7 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetTopCollectionsAsync(users_or_groups, elementId, key, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetTopCollectionsAsync(Users_or_groups users_or_groups, string elementId, string key, Format7 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/collections/top?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetSpecificCollectionAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Format8 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetSpecificCollectionAsync(users_or_groups, elementId, key, collectionKey, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetSpecificCollectionAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Format8 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (collectionKey == null)
                throw new System.ArgumentNullException("collectionKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/collections/{collectionKey}?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{collectionKey}", System.Uri.EscapeDataString(ConvertToString(collectionKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="body">First, &lt;a href="#!/zotero/getSpecificCollection" target="_blank"&gt;retrieve the current version of the collection&lt;/a&gt;&lt;br/&gt;The editable data will be found in the data property in the response.&lt;br/&gt;Copy all the data object, edit the values and send it to the server.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PUTupdateCollectionAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Collection body)
        {
            return PUTupdateCollectionAsync(users_or_groups, elementId, key, collectionKey, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="body">First, &lt;a href="#!/zotero/getSpecificCollection" target="_blank"&gt;retrieve the current version of the collection&lt;/a&gt;&lt;br/&gt;The editable data will be found in the data property in the response.&lt;br/&gt;Copy all the data object, edit the values and send it to the server.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PUTupdateCollectionAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Collection body, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (collectionKey == null)
                throw new System.ArgumentNullException("collectionKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/collections/{collectionKey}?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{collectionKey}", System.Uri.EscapeDataString(ConvertToString(collectionKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Conflict: The target library is locked", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Precondition Failed: The provided Zotero-Write-Token has already been submitted.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="if_Unmodified_Since_Version">Item's current version number</param>
        /// <returns>ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DELETEdeleteCollectionAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, long if_Unmodified_Since_Version)
        {
            return DELETEdeleteCollectionAsync(users_or_groups, elementId, key, collectionKey, if_Unmodified_Since_Version, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="if_Unmodified_Since_Version">Item's current version number</param>
        /// <returns>ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DELETEdeleteCollectionAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, long if_Unmodified_Since_Version, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (collectionKey == null)
                throw new System.ArgumentNullException("collectionKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/collections/{collectionKey}?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{collectionKey}", System.Uri.EscapeDataString(ConvertToString(collectionKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_Unmodified_Since_Version == null)
                        throw new System.ArgumentNullException("if_Unmodified_Since_Version");
                    request_.Headers.TryAddWithoutValidation("If-Unmodified-Since-Version", ConvertToString(if_Unmodified_Since_Version, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Conflict: The target library is locked", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 412)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Precondition Failed: The provided Zotero-Write-Token has already been submitted.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetSpecificCollectionSubCollectionsAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Format7 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetSpecificCollectionSubCollectionsAsync(users_or_groups, elementId, key, collectionKey, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetSpecificCollectionSubCollectionsAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Format7 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (collectionKey == null)
                throw new System.ArgumentNullException("collectionKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/collections/{collectionKey}/collections?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{collectionKey}", System.Uri.EscapeDataString(ConvertToString(collectionKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetSpecificCollectionItemsAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetSpecificCollectionItemsAsync(users_or_groups, elementId, key, collectionKey, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetSpecificCollectionItemsAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (collectionKey == null)
                throw new System.ArgumentNullException("collectionKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/collections/{collectionKey}/items?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{collectionKey}", System.Uri.EscapeDataString(ConvertToString(collectionKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetSpecificCollectionTopItemsAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetSpecificCollectionTopItemsAsync(users_or_groups, elementId, key, collectionKey, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetSpecificCollectionTopItemsAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Format2 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (collectionKey == null)
                throw new System.ArgumentNullException("collectionKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/collections/{collectionKey}/items/top?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{collectionKey}", System.Uri.EscapeDataString(ConvertToString(collectionKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetSpecificCollectionTagsAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Format5 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetSpecificCollectionTagsAsync(users_or_groups, elementId, key, collectionKey, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="collectionKey">A specific collection in the library</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetSpecificCollectionTagsAsync(Users_or_groups users_or_groups, string elementId, string key, string collectionKey, Format5 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (collectionKey == null)
                throw new System.ArgumentNullException("collectionKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/collections/{collectionKey}/tags?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{collectionKey}", System.Uri.EscapeDataString(ConvertToString(collectionKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetSearchesAsync(Users_or_groups users_or_groups, string elementId, string key, Format9 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetSearchesAsync(users_or_groups, elementId, key, format, itemType, q, qmode, since, tag, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="format">Answer format.</param>
        /// <param name="itemType">Search parameter: Item type search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="q">Search parameter: Quick search. Searches titles and individual creator fields by default. Use the qmode parameter to change the mode. Currently supports phrase searching only.</param>
        /// <param name="qmode">Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</param>
        /// <param name="since">Search parameter: Return only objects modified after the specified library verson.</param>
        /// <param name="tag">Search parameter: Tag search. It supports &lt;a href="https://www.zotero.org/support/dev/web_api/v3/basics#search_syntax" target="_blank"&gt;the boolean search&lt;/a&gt;</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetSearchesAsync(Users_or_groups users_or_groups, string elementId, string key, Format9 format, string itemType, string q, Qmode? qmode, long? since, string tag, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/searches?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (itemType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("itemType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(itemType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qmode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qmode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qmode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (since != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since") + "=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="body">First, &lt;a href="#!/zotero/getSpecificItem" target="_blank"&gt;retrieve the current version of the item&lt;/a&gt;&lt;br/&gt;The editable data will be found in the data property in the response.&lt;br/&gt;Copy all the data object, edit the values and send it to the server.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task POSTcreateSearchAsync(Users_or_groups users_or_groups, string elementId, string key, System.Collections.Generic.IEnumerable<Anonymous2> body)
        {
            return POSTcreateSearchAsync(users_or_groups, elementId, key, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="body">First, &lt;a href="#!/zotero/getSpecificItem" target="_blank"&gt;retrieve the current version of the item&lt;/a&gt;&lt;br/&gt;The editable data will be found in the data property in the response.&lt;br/&gt;Copy all the data object, edit the values and send it to the server.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task POSTcreateSearchAsync(Users_or_groups users_or_groups, string elementId, string key, System.Collections.Generic.IEnumerable<Anonymous2> body, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/searches?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="searchKey">A specific saved search in the library.</param>
        /// <param name="format">Answer format.</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GETgetSpecificSearchAsync(Users_or_groups users_or_groups, string elementId, string key, string searchKey, Format10 format, Sort sort, Direction? direction, long? limit, long? start)
        {
            return GETgetSpecificSearchAsync(users_or_groups, elementId, key, searchKey, format, sort, direction, limit, start, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="users_or_groups">Do you want to make a search on a group or a user?</param>
        /// <param name="elementId">&lt;ul&gt;&lt;li&gt;If "groups": the group Id (ex: 471609 for the &lt;a href="https://www.zotero.org/groups/swaggerui-open-group"&gt;swaggerui-open-group&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;If "users": the User IDs are different from usernames and can be found on the &lt;a target="_blank" href="https://www.zotero.org/settings/keys"&gt;API Keys page&lt;/a&gt; and in OAuth responses. (ex: 2897918 for swaggerui user id)&lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="key">The zotero API key. It is a key to which bearer you'll grant permission to write in the user or group library. &lt;a href="https://www.zotero.org/settings/keys" target="blank"&gt;This key can be created or found in your settings&lt;/a&gt; (it is called "private key").&lt;br/&gt;For the swaggerui user it is 7f1iVhE5D2GHVkRYwpSszGUA</param>
        /// <param name="searchKey">A specific saved search in the library.</param>
        /// <param name="format">Answer format.</param>
        /// <param name="sort">The name of the field by which entries are sorted.</param>
        /// <param name="direction">The sorting direction of the field specified in the sort parameter.</param>
        /// <param name="limit">The maximum number of results to return with a single request</param>
        /// <param name="start">The index of the first result. Combine with the limit parameter to select a slice of the available results</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task GETgetSpecificSearchAsync(Users_or_groups users_or_groups, string elementId, string key, string searchKey, Format10 format, Sort sort, Direction? direction, long? limit, long? start, System.Threading.CancellationToken cancellationToken)
        {
            if (users_or_groups == null)
                throw new System.ArgumentNullException("users_or_groups");
    
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");
    
            if (searchKey == null)
                throw new System.ArgumentNullException("searchKey");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            if (format == null)
                throw new System.ArgumentNullException("format");
    
            if (sort == null)
                throw new System.ArgumentNullException("sort");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{users_or_groups}/{elementId}/searches/{searchKey}?");
            urlBuilder_.Replace("{users_or_groups}", System.Uri.EscapeDataString(ConvertToString(users_or_groups, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{searchKey}", System.Uri.EscapeDataString(ConvertToString(searchKey, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (direction != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("direction") + "=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 304)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Modified", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Items : System.Collections.ObjectModel.Collection<object>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Collection 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ParentCollection { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionArray : System.Collections.ObjectModel.Collection<Anonymous>
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Search : System.Collections.ObjectModel.Collection<Anonymous2>
    {
    
    }
    
    /// <summary>Answer format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Format
    {
        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 0,
    
    }
    
    /// <summary>The name of the field by which entries are sorted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Sort
    {
        [System.Runtime.Serialization.EnumMember(Value = @"accessDate")]
        AccessDate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"addedBy")]
        AddedBy = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"callNumber")]
        CallNumber = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"creator")]
        Creator = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dateAdded")]
        DateAdded = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dateModified")]
        DateModified = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"journalAbbreviation")]
        JournalAbbreviation = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"language")]
        Language = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"libraryCatalog")]
        LibraryCatalog = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"numItems")]
        NumItems = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"publicationTitle")]
        PublicationTitle = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"publisher")]
        Publisher = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rights")]
        Rights = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"title")]
        Title = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"type")]
        Type = 15,
    
    }
    
    /// <summary>The sorting direction of the field specified in the sort parameter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Direction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,
    
    }
    
    /// <summary>Do you want to make a search on a group or a user?</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Users_or_groups
    {
        [System.Runtime.Serialization.EnumMember(Value = @"groups")]
        Groups = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"users")]
        Users = 1,
    
    }
    
    /// <summary>Answer format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Format2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 0,
    
    }
    
    /// <summary>Search parameter: Quick search mode. To include full-text content in the search, use everything. Searching of other fields will be possible in the future.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Qmode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"everything")]
        Everything = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"titleCreatorYear")]
        TitleCreatorYear = 1,
    
    }
    
    /// <summary>Answer format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Format3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 0,
    
    }
    
    /// <summary>Answer format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Format4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"atom")]
        Atom = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bib")]
        Bib = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bibtex")]
        Bibtex = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bookmarks")]
        Bookmarks = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"coins")]
        Coins = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"csljson")]
        Csljson = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"mods")]
        Mods = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"refer")]
        Refer = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rdf_bibliontology")]
        Rdf_bibliontology = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rdf_dc")]
        Rdf_dc = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rdf_zotero")]
        Rdf_zotero = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ris")]
        Ris = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tei")]
        Tei = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"wikipedia")]
        Wikipedia = 14,
    
    }
    
    /// <summary>Answer format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Format5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 0,
    
    }
    
    /// <summary>Answer format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Format6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 0,
    
    }
    
    /// <summary>Answer format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Format7
    {
        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ParentCollection { get; set; }
    
    
    }
    
    /// <summary>Answer format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Format8
    {
        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 0,
    
    }
    
    /// <summary>Answer format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Format9
    {
        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Anonymous2 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; } = "My Search";
    
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Conditions> Conditions { get; set; }
    
    
    }
    
    /// <summary>Answer format.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Format10
    {
        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Conditions 
    {
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; } = "title";
    
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operator { get; set; } = "contains";
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; } = "foo";
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016